filter(indicator_desc == select_indicator & sector == select_sector_input)
HTML(sprintf("<span style='color: %s; font-size: 20px;'><strong>%s</strong></span><br><span style=' font-size: 14px;'><strong> %s</strong></span><br><span style='font-size: 10px;'>%s",
reach_red, select_sector_input, indicator_info$indicator_desc, ifelse(!is.na(indicator_info$variable), indicator_info$variable,"")),
'<style type="text/css"> .shiny-html-output { font-size: 14px; color:#006068
font-family: Arial} </style>')
})
# initiatize dropdowns to default on HH Profile
observe({
select_sector <- input$sector
selected_ind_group <- returnee_lookup %>%
filter(sector == as.character(select_sector))
updateSelectInput(session, "indicator", choices = unique(as.character(selected_ind_group$indicator_desc)))
})
}
runApp(shinyApp(ui, server),launch.browser = TRUE)
###############################################################################################
############################# Iraq MCNA Dashboard - RShiny #####################################
###############################################################################################
# set encoding options
# tmp.enc <- options()$encoding
# options(encoding = "UTF-8")
############################# install packages #####################################
# spatial data
# install.packages("sf")                     # vector data tools
# install.packages("raster")                 # raster data tools
# install.packages("leaflet")                # plot interactive maps
# install.packages("spatialEco")             # calculate zonal statistics
#
# # additional packages
# install.packages("tidyverse")              # data wrangling packages
# install.packages("shiny")                  # App building tools
# install.packages("shinydashboard")         # calculate zonal statistics
# install.packages("shinyjs")                # javascript plugin for Shiny
# install.packages("widgetframe")            # app widgets
# install.packages("rsconnect")              # connect to online shiny server
# install.packages("highcharter")            # interactive graph packages
# install.packages("readxl")                 # import excel files
# install.packages("lubridate")              # smooth date manipulation
############################# import packages #####################################
# spatial data
library(sf)                     # vector data tools
library(lwgeom)
library(raster)                 # raster data tools
library(leaflet)                # plot interactive maps
library(geojsonio)              # deal with geojson layers
library(spatialEco)             # calculate zonal statistics
library(rmapshaper)             # tools for simplifying polygons
# additional packages
library(tidyverse)              # data wrangling packages
library(shiny)                  # App building tools
library(shinydashboard)         # calculate zonal statistics
library(shinyjs)                # javascript plugin for Shiny
library(widgetframe)            # app widgets
library(rsconnect)              # connect to online shiny server
library(highcharter)            # interactive graph packages
library(readxl)                 # import excel files
library(lubridate)              # smooth date manipulation
library(htmltools)              # html scripting for R
library(expss)                  # vlookup for R
# set overall theme
theme_set(theme_minimal())
################################ COLOURS ##########################################
# REACH colours
reach_grey     <- "#58585A"
reach_red      <- "#EE5859"
reach_orpink   <- "#f8aa9b"
reach_pink     <- "#f5a6a7"
reach_hot_pink <- "#ef6d6f"
reach_mddk_red <- "#bf4749"
reach_dk_red   <- "#782c2e"
reach_lt_grey  <- "#D1D3D4"
reach_beige    <- "#D2CBB8"
reach_orange   <- "#F69E61"
white          <- "#FFFFFF"
black          <- "#00000"
#######################################################################
# read in MCNA datasets
returnee_df <- read.csv("csv_data/datasets/mcna_returnee_results.csv", na.strings = c("NA", "#N/A", "N/A"), encoding = "UTF-8")
idp_out_camp_df <- read.csv("csv_data/datasets/mcna_idp_out_camp_results.csv", na.strings = c("NA", "#N/A", "N/A"), encoding = "UTF-8")
idp_in_camp_df <- read.csv("csv_data/datasets/mcna_idp_in_camp_results.csv", na.strings = c("NA", "#N/A", "N/A"), encoding = "UTF-8")
#########################################################################################
# read in indicator code lookup tables for dropdowns in UI
returnee_lookup <- read.csv("csv_data/lookups/returnee_lookup.csv", encoding = "UTF-8") %>%
mutate(indicator_id = X.U.FEFF.indicator_id)
idp_out_camp_lookup <- read.csv("csv_data/lookups/idp_out_camp_lookup.csv", encoding = "UTF-8")%>%
mutate(indicator_id = X.U.FEFF.indicator_id)
idp_in_camp_lookup <- read.csv("csv_data/lookups/idp_in_camp_lookup.csv", encoding = "UTF-8") %>%
mutate(indicator_id = X.U.FEFF.indicator_id)
################################## UI ###################################################
#########################################################################################
# # navbar page with tabs
ui <- navbarPage(title       = div(
div(
id = "img-id",
img(src = "reach_logo.png")
),
strong(HTML(sprintf("<span style='font-size:24px; color: %s'>2020 Iraq Multicluster Needs Assessment</span>", white))), id="nav"),
windowTitle = "Iraq MCNA 2020 Dashboard",
tabPanel(strong("Overview"),
value = "panel1",
icon= icon("map-marker"),
div(class="outer",
tags$head(
# custom CSS
includeCSS("styles.css")
),
leafletOutput('mapOverview', width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 75, left = 20, right = "auto",
width = 350,
h4(HTML(sprintf("<span style='color: %s; border-bottom: 2px solid %s;'><strong>Methodology</span></strong>", reach_red, reach_red))),
h6(HTML("At the time of data collection, the operating environment in Iraq was such that safety concerns related to COVID-19 as well as movement restrictions were only present in some districts whereas other districts were fully accessible and safety concerns related to a face-to-face data collection were considered low. Taking into consideration the variying operational and safety complexities across districts, the MCNA VIII was implemented through a nationwide household-level survey that was building on a 'hybrid' form of data collection through which face-to-face surveys were only administered in those districts where no safety concerns or movement restrictions were present at the time of data collection. In all other districts, household surveys were collected through a remote phone-based data collection. ")),
h6(HTML("<strong>Face-to-face household surveys:</strong> A two-stage stratified cluster sampling approach (90% level of confidence and a 10% margin of error) was employed in all accessible districts where data was collected through face-to-face interviews. Based on the population figures from the IOM DTM Master List, sampling frames were developed for all districts with a minimum of 200 IDP or returnee househols and adjusted to align with OCHA-defined administrative boundaries. A cluster sample was drawn for each population group in each district and locations were selected with probability proportional to size. Within each location, a set of geo-points was randomly generated and provided to enumerators who would then interview an eligible household nearest to a given geo-point. In areas where multiple conflict-affected population groups are present, the precision of stratification-level findings will increase accordingly.")),
h6(HTML("<strong>Remote phone-based surveys:</strong> For those districts where data collection through face-to-face interviews was inhibited by safety concerns and/or movement restrictions, a non-probability purposive quota sampling approach was employed. The minimum quotas that were established through this approach ensure that the collected data is indicative of the geographic location (district) (quota 1) and population groups (IDPs in-camp, IDPs out of camp and returnees) (quota 2). Wherever the minimum quota targets of 60 surveys per district and population group could not be reached with the available phone numbers, REACH combined the quota-based sampling with a snowball sampling approach. Through the snowball sampling, interviewees refered to other potential participants from the same quotas that can be contacted for the assessment. While most respondents for the quota sampling were found through previous REACH assessments that have employed randomized sampling methodologies, some phone numbers were also found through local networks of partner organisations. All respondents that are found through previous REACH assessments have given their consent to be contacted for potential follow-up assessments conducted by REACH."))),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 75,  right = 20, left = "auto",
h4(HTML("<span style='color: #EE5859'><strong>Coverage Map</strong></span>")),
h5(HTML("<span style=' color: #58585A'><strong>2020 Iraq MCNA</strong></span>")),
h6(HTML("<span style='color: #58585A'><strong>Data sources:</strong></span><br>Administrative boundaries: OCHA<br>MCNA coverage: REACH"))
))
),
tabPanel(strong("Data explorer"),
value = "panel2",
icon= icon("map-marker"),
div(class="outer2",
tags$head(
includeCSS("styles.css")
),
leafletOutput('map', width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 75, right = "auto", left = 20,
width = 350,
h4(HTML(sprintf("<span style='color: %s'><strong>District explorer</span></strong>", reach_red))),
h5(HTML("<span style='color: #58585A'><strong>Select an indicator</strong></span>")),
selectInput("popgroup", "Population group:",
choices = c("Returnees"),
selected = "Returnees"),
selectInput("sector", "Sector:",
choices = sort(unique(as.character(returnee_lookup$sector)), decreasing = FALSE),
selected = "Household Profile"),
selectInput("indicator", "Indicator:",
choices = sort(returnee_lookup$indicator_desc[returnee_lookup$sector == "Household Profile"], decreasing = FALSE))
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 75, left = "auto", right = 20,
width = 250,
p(htmlOutput("infobox")))
)),
conditionalPanel("false", icon("crosshairs"))
)
################################## GLOBAL - prepare data ################################
#########################################################################################
################ Read spatial data and convert to SF Objects
# read in governorate layer
irq_gov <- st_read("spatial_data/admin/irq_admbnda_adm1_cso_20190603.shp", options = "ENCODING=UTF-8")
# # convert gov boundaries to lines to display as boundaries on maps
irq_gov_lines    <- st_cast(irq_gov,"MULTILINESTRING")
irq_gov_lines    <- st_cast(irq_gov_lines,"LINESTRING")
# ###################  DISTRICTS #############
# read in district shapefile layer
irq_dist <- st_read("spatial_data/admin/irq_admbnda_adm2_cso_20190603.shp", options = "ENCODING=UTF-8")
############################################################################################
########### join data to district shapefile
irq_dist_returnee <- left_join(irq_dist, returnee_df, by = "ADM2_EN")
irq_dist_idp_out <- left_join(irq_dist, idp_out_camp_df, by = "ADM2_EN")
irq_dist_idp_in <- left_join(irq_dist, idp_in_camp_df, by = "ADM2_EN")
############################################################################################
######### MAP LABELS #######################################################################
# gov labels ###########
# convert gov polygons to centroids for label positioning
gov_labels <- st_read("spatial_data/gov_centroids.geojson")
# gov label format --- main IRQ map
gov_labels_halo <- sprintf(
'<strong><span style="font-size: 9px; color: %s">%s</span><br><span style="font-size: 12px; color: %s">%s</span></strong>',
reach_grey, gov_labels$ADM1_EN, reach_grey, gov_labels$ADM1_AR)%>%
lapply(htmltools::HTML)
####################### TOOLTIPS ##########################################################################################
################### districts ###################################
dist_tooltip_home_returnee <- sprintf(
'<strong><span style="font-size: 20px; color: %s;">%s</span></strong><br><strong><span style="font-size: 15px; color: %s;">%s</span></strong><br><span style ="color: %s;">%s</span>',
ifelse(irq_dist_returnee$indicative == 1, reach_pink, reach_hot_pink), irq_dist_returnee$ADM2_EN, reach_grey, irq_dist_returnee$ADM1_EN, reach_grey,
case_when(irq_dist_returnee$indicative == 1 ~ "phone surveys<br>indicative only", irq_dist_returnee$indicative == 0 ~ "in person surveys<br>representative"))%>%
lapply(htmltools::HTML)
dist_tooltip_home_idp_out <- sprintf(
'<strong><span style="font-size: 20px; color: %s;">%s</span></strong><br><strong><span style="font-size: 15px; color: %s;">%s</span></strong><br><span style ="color: %s;">%s</span>',
ifelse(irq_dist_idp_out$indicative == 1, reach_pink, reach_hot_pink), irq_dist_idp_out$ADM2_EN, reach_grey, irq_dist_idp_out$ADM1_EN, reach_grey,
case_when(irq_dist_idp_out$indicative == 1 ~ "phone surveys<br>indicative only", irq_dist_idp_out$indicative == 0 ~ "in person surveys<br>representative"))%>%
lapply(htmltools::HTML)
dist_tooltip_home_idp_in <- sprintf(
'<strong><span style="font-size: 20px; color: %s;">%s</span></strong><br><strong><span style="font-size: 15px; color: %s;">%s</span></strong><br><span style ="color: %s;">%s</span>',
ifelse(irq_dist_idp_in$indicative == 1, reach_pink, reach_hot_pink), irq_dist_idp_in$ADM2_EN, reach_grey, irq_dist_idp_in$ADM1_EN, reach_grey,
case_when(irq_dist_idp_in$indicative == 1 ~ "phone surveys<br>indicative only", irq_dist_idp_in$indicative == 0 ~ "in person surveys<br>representative"))%>%
lapply(htmltools::HTML)
dist_tooltip_not_assessed <- sprintf(
'<strong><span style="font-size: 12px; color: %s;">%s</span></strong><br><strong><span style="font-size: 15px; color: %s;">%s</span></strong><br>Not assessed',
reach_grey, irq_dist$ADM2_EN, reach_grey, irq_dist$ADM2_AR)%>%
lapply(htmltools::HTML)
# construct legend for landing page map
colors <- c(reach_hot_pink, reach_pink, reach_lt_grey)
labels <- c("In person surveys", "Phone surveys", "District not assessed")
addLegendCustom <- function(map, colors, labels, opacity = 0.8){
make_shapes <- function(colors) {
paste0(colors, "; width:20px; top: 0; height:20px; border:1px solid  white; text-align: center; border-radius:0%")
}
make_labels <- function(labels) {
paste0("<div style='display: inline-block; text-align: center; height:20px; line-height: 20px;'>", labels, "</div>")
}
legend_colors <- make_shapes(colors)
legend_labels <- make_labels(labels)
return(addLegend(map, colors = legend_colors, labels = legend_labels, opacity = opacity, position = "bottomright"))
}
##################################################################################################
################################## SERVER side ###################################################
##################################################################################################
server <- function(input, output, session) {
# build landing page map
output$mapOverview <- renderLeaflet({
irq_map <-leaflet(options=leafletOptions(
zoomControl = FALSE, doubleClickZoom = FALSE, zoomSnap = 0.01, zoomDelta = 0.01,
attributionControl = FALSE, dragging = TRUE, scrollWheelZoom = FALSE,
easeLinearity = 0.35, minZoom = 6, maxZoom = 7)) %>%
# add base map layer from carto DB
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(opacity = 0.5)) %>%
# add districts layer
addPolygons(data         = irq_dist_returnee,
group        = "Returnees",
color        = white,
fillColor    = case_when(irq_dist_returnee$indicative == 1 ~ reach_pink,
irq_dist_returnee$indicative == 0 ~ reach_hot_pink,
TRUE ~reach_lt_grey),
label        = ifelse(is.na(irq_dist_returnee$indicative),
dist_tooltip_not_assessed,
dist_tooltip_home_returnee),
weight       = 0.2,
smoothFactor = 0.5,
opacity      = 1,
fillOpacity  = 0.9,
options      = list(zIndex = 400),
highlightOptions = highlightOptions(fillColor    = white,
color        = white,
weight       = 2,
opacity      = 0.9,
fillOpacity  = 0.4,
bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
"padding" = "3px 8px",
"font-family" = "Arial"
))) %>%
addPolygons(data         = irq_dist_idp_out,
group        = "Out of camp IDPs",
color        = white,
fillColor    = case_when(irq_dist_idp_out$indicative == 1 ~ reach_pink,
irq_dist_idp_out$indicative == 0 ~ reach_hot_pink,
TRUE ~reach_lt_grey),
label        = ifelse(is.na(irq_dist_idp_out$indicative),
dist_tooltip_not_assessed,
dist_tooltip_home_idp_out),
weight       = 0.2,
smoothFactor = 0.5,
opacity      = 1,
fillOpacity  = 0.9,
options      = list(zIndex = 400),
highlightOptions = highlightOptions(fillColor    = white,
color        = white,
weight       = 2,
opacity      = 0.9,
fillOpacity  = 0.4,
bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
"padding" = "3px 8px",
"font-family" = "Arial"
))) %>%
# idp incamp
addPolygons(data         = irq_dist_idp_in,
group        = "In camp IDPs",
color        = white,
fillColor    = case_when(irq_dist_idp_in$indicative == 1 ~ reach_pink,
irq_dist_idp_in$indicative == 0 ~ reach_hot_pink,
TRUE ~reach_lt_grey),
label        = ifelse(is.na(irq_dist_idp_in$indicative),
dist_tooltip_not_assessed,
dist_tooltip_home_idp_in),
weight       = 0.2,
smoothFactor = 0.5,
opacity      = 1,
fillOpacity  = 0.9,
options      = list(zIndex = 400),
highlightOptions = highlightOptions(fillColor    = white,
color        = white,
weight       = 2,
opacity      = 0.9,
fillOpacity  = 0.4,
bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
"padding" = "3px 8px",
"font-family" = "Arial"
))) %>%
# Add governorate lines for aesthetics
addPolylines(data        = irq_gov_lines,
group       = "Returnees",
color       = reach_grey,
weight      = 1.1,
opacity     = 1.0,
options     = list(zIndex = 300))%>%
addPolylines(data        = irq_gov_lines,
group       = "Out of camp IDPs",
color       = reach_grey,
weight      = 1.1,
opacity     = 1.0,
options     = list(zIndex = 300))%>%
addPolylines(data        = irq_gov_lines,
group       = "In camp IDPs",
color       = reach_grey,
weight      = 1.1,
opacity     = 1.0,
options     = list(zIndex = 300))%>%
# add governorate labelling
addLabelOnlyMarkers(data         = gov_labels,
label        = gov_labels_halo,
labelOptions = labelOptions(noHide    = T,
direction = 'center',
textOnly  = T,
style     = list(
"padding"     = "3px 8px",
"font-family" = "Arial",
"text-shadow" = sprintf("1px 1px 7px %s", white)
))) %>%
# # add legend
addLegendCustom(colors, labels) %>%
# add layers control to toggle between pop groups
addLayersControl(
position   = "bottomright",
baseGroups = c("Returnees","Out of camp IDPs", "In camp IDPs"),
options    = layersControlOptions(collapsed = F, className = "layercontrol")) %>%
# add scale
addScaleBar(position = "bottomright", scaleBarOptions(imperial = FALSE)) %>%
# set view coordinates
setView(lng  = 42,
lat  = 33.7,
zoom = 6.4)
})
# build district explorer map
output$map <- renderLeaflet({
# put dropdown input into a variable
select_indicator <- input$indicator
select_ind_num <- as.character(vlookup_df(select_indicator, returnee_lookup, result_column = 'indicator_id', lookup_column = 'indicator_desc'))
# match to get full indicator name
select_ind_full <- vlookup_df(select_indicator, returnee_lookup, result_column = 'variable', lookup_column = 'indicator_desc')
select_ind_tooltip <- vlookup_df(select_indicator, returnee_lookup, result_column = 'tooltip', lookup_column = 'indicator_desc')
# colour pallette for choropleth map
reach_red_pal <- colorNumeric(
palette = colorRampPalette(c("#FFE3E4", reach_red))(length(as.numeric(irq_dist_returnee[[select_ind_num]]))),
domain  = as.numeric(irq_dist_returnee[[select_ind_num]]))
dist_tooltip <- sprintf(
'<strong><span style="font-size: 20px; color: %s;">%s</span></strong><br><strong><span style="font-size: 15px; color: %s;">%s</span></strong><br><strong><span style="font-size: 15px; color: %s;">%s</span></strong><br>%s',
ifelse(is.na(as.numeric(irq_dist_returnee[[select_ind_num]])), reach_lt_grey, reach_red_pal(as.numeric(irq_dist_returnee[[select_ind_num]]))),
irq_dist$ADM2_EN, reach_grey, irq_dist$ADM1_EN,
ifelse(is.na(as.numeric(irq_dist_returnee[[select_ind_num]])), reach_lt_grey, reach_red_pal(as.numeric(irq_dist_returnee[[select_ind_num]]))),
ifelse(!is.na(irq_dist_returnee[[select_ind_num]]), formatC(as.numeric(irq_dist_returnee[[select_ind_num]]),format="f", big.mark=",", digits=2), "not assessed"),
ifelse(!is.na(irq_dist_returnee[[select_ind_num]]), select_ind_tooltip, ""))%>%
lapply(htmltools::HTML)
dist_map <-leaflet(options=leafletOptions(
zoomControl = FALSE, doubleClickZoom = FALSE, zoomSnap = 0.01, zoomDelta = 0.01,
attributionControl = FALSE, dragging = FALSE, scrollWheelZoom = FALSE,
easeLinearity = 0.35, minZoom = 6.4, maxZoom = 6.4)) %>%
# add base map layer from carto DB
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(opacity = 0.5)) %>%
# add districts layer
addPolygons(data         = irq_dist_returnee,
color        = reach_grey,
fillColor    = ifelse(is.na(as.numeric(irq_dist_returnee[[select_ind_num]])), reach_lt_grey, reach_red_pal(as.numeric(irq_dist_returnee[[select_ind_num]]))),
label        = dist_tooltip,
weight       = 0.1,
smoothFactor = 0.5,
opacity      = 0.9,
fillOpacity  = 0.9,
options      = list(zIndex = 400),
highlightOptions = highlightOptions(fillColor    = white,
color        = white,
weight       = 3,
opacity      = 0.9,
fillOpacity  = 0.5,
bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
"padding" = "3px 8px",
"font-family" = "Arial"
))) %>%
# Add governorate lines for aesthetics
addPolylines(data        = irq_gov_lines,
color       = reach_grey,
weight      = 0.5,
opacity     = 1.0,
options     = list(zIndex = 300))%>%
# add governorate labelling
addLabelOnlyMarkers(data         = gov_labels,
label        = gov_labels_halo,
labelOptions = labelOptions(noHide    = T,
direction = 'center',
textOnly  = T,
style     = list(
"padding"     = "3px 8px",
"font-family" = "Arial",
"text-shadow" = sprintf("1px 1px 7px %s", white)
))) %>%
# add gradient legend
leaflet::addLegend(position   = "bottomright",
pal     = reach_red_pal,
values  = irq_dist_returnee[[select_ind_num]],
title   = "Legend",
bins    = 5,
opacity = 1) %>%
# add scale
addScaleBar(position = "bottomleft", scaleBarOptions(imperial = FALSE)) %>%
# set view coordinates
setView(lng  = 42,
lat  = 33.7,
zoom = 6.4)
})
# render info box for indicator select
output$infobox <- renderUI({
select_sector_input <- input$sector
select_indicator    <- input$indicator
indicator_info <- returnee_lookup %>%
filter(indicator_desc == select_indicator & sector == select_sector_input)
HTML(sprintf("<span style='color: %s; font-size: 20px;'><strong>%s</strong></span><br><span style=' font-size: 14px;'><strong> %s</strong></span><br><span style='font-size: 10px;'>%s",
reach_red, select_sector_input, indicator_info$indicator_desc, ifelse(!is.na(indicator_info$variable), indicator_info$variable,"")),
'<style type="text/css"> .shiny-html-output { font-size: 14px; color:#006068
font-family: Arial} </style>')
})
# initiatize dropdowns to default on HH Profile
observe({
select_sector <- input$sector
selected_ind_group <- returnee_lookup %>%
filter(sector == as.character(select_sector))
updateSelectInput(session, "indicator", choices = unique(as.character(selected_ind_group$indicator_desc)))
})
}
runApp(shinyApp(ui, server),launch.browser = TRUE)
deployApp()
#########################################################################################
# read in indicator code lookup tables for dropdowns in UI
returnee_lookup <- read.csv("csv_data/lookups/returnee_lookup.csv", encoding = "UTF-8") %>%
mutate(indicator_id = X.U.FEFF.indicator_id)
############################# import packages #####################################
# spatial data
library(sf)                     # vector data tools
library(lwgeom)
library(raster)                 # raster data tools
library(leaflet)                # plot interactive maps
library(geojsonio)              # deal with geojson layers
library(spatialEco)             # calculate zonal statistics
library(rmapshaper)             # tools for simplifying polygons
# additional packages
library(tidyverse)              # data wrangling packages
library(shiny)                  # App building tools
library(shinydashboard)         # calculate zonal statistics
library(shinyjs)                # javascript plugin for Shiny
library(widgetframe)            # app widgets
library(rsconnect)              # connect to online shiny server
library(highcharter)            # interactive graph packages
library(readxl)                 # import excel files
library(lubridate)              # smooth date manipulation
library(htmltools)              # html scripting for R
library(expss)                  # vlookup for R
# set overall theme
theme_set(theme_minimal())
################################ COLOURS ##########################################
# REACH colours
reach_grey     <- "#58585A"
reach_red      <- "#EE5859"
reach_orpink   <- "#f8aa9b"
reach_pink     <- "#f5a6a7"
reach_hot_pink <- "#ef6d6f"
reach_mddk_red <- "#bf4749"
reach_dk_red   <- "#782c2e"
reach_lt_grey  <- "#D1D3D4"
reach_beige    <- "#D2CBB8"
reach_orange   <- "#F69E61"
white          <- "#FFFFFF"
black          <- "#00000"
#######################################################################
# read in MCNA datasets
returnee_df <- read.csv("csv_data/datasets/mcna_returnee_results.csv", na.strings = c("NA", "#N/A", "N/A"), encoding = "UTF-8")
idp_out_camp_df <- read.csv("csv_data/datasets/mcna_idp_out_camp_results.csv", na.strings = c("NA", "#N/A", "N/A"), encoding = "UTF-8")
idp_in_camp_df <- read.csv("csv_data/datasets/mcna_idp_in_camp_results.csv", na.strings = c("NA", "#N/A", "N/A"), encoding = "UTF-8")
#########################################################################################
# read in indicator code lookup tables for dropdowns in UI
returnee_lookup <- read.csv("csv_data/lookups/returnee_lookup.csv", encoding = "UTF-8") %>%
mutate(indicator_id = X.U.FEFF.indicator_id)
deployApp()
